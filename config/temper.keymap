/*
 * Copyright (c) 2020 duckyb
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define Base 0
#define NAV_NUM 1
#define SYM 2
#define FUN 3

&sk { quick-release; };

&lt {
    flavor = "hold-preferred";
    quick-tap-ms = <180>;
};

/ {
    behaviors {
        hm: hm {
            compatible = "zmk,behavior-hold-tap";
            label = "HM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            quick-tap-ms = <170>;
            tapping-term-ms = <190>;
            global-quick-tap;
            flavor = "tap-preferred";
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 20 21 22 23 24 14 30 31 32 33 34 35 25 15 5 6 16 26 27 17 7 8 18 28 29 19 9>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 10 20 21 1 11 12 2 3 4 24 14 13 23 22 30 31 32 33 34 35 25 26 28 27 29 9 8 7 6 5 15>;
        };

        mo_tog: mo_tog {
            compatible = "zmk,behavior-hold-tap";
            label = "MO_TOG";
            bindings = <&mo>, <&tog>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
        };
    };

    combos {
        compatible = "zmk,combos";

        left_bkt {
            bindings = <&kp LBKT>;
            key-positions = <3 4>;
            timeout-ms = <30>;
        };

        right_bkt {
            bindings = <&kp RBKT>;
            key-positions = <6 5>;
            timeout-ms = <30>;
        };

        left_par {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <13 14>;
            timeout-ms = <30>;
        };

        right_par {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <16 15>;
            timeout-ms = <30>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <23 24>;
            timeout-ms = <35>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <26 25>;
            timeout-ms = <35>;
        };

        bac {
            bindings = <&kp BACKSLASH>;
            key-positions = <3 14>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <15 5>;
            timeout-ms = <30>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <11 12>;
            timeout-ms = <30>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <16 17>;
            timeout-ms = <30>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <12 13>;
            timeout-ms = <30>;
        };

        back {
            bindings = <&kp BACKSPACE>;
            key-positions = <17 18>;
            timeout-ms = <30>;
        };

        del {
            bindings = <&kp DELETE>;
            key-positions = <27 28>;
            timeout-ms = <30>;
        };

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <21 22>;
            timeout-ms = <30>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <22 23>;
            timeout-ms = <30>;
        };

        slash {
            bindings = <&kp SLASH>;
            key-positions = <15 6>;
        };

        Question_mark {
            bindings = <&kp QUESTION>;
            key-positions = <29 28>;
            layers = <0>;
        };

        to_Base_layer {
            bindings = <&to 0>;
            key-positions = <32 33>;
        };

        go_to_qwerty {
            bindings = <&to 5>;
            key-positions = <35 34 33>;
        };

        undo {
            bindings = <&kp LC(Z)>;
            key-positions = <20 21>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base_colemak {
            label = "Base";
            display-name = "Base";
            bindings = <
  &kp Q               &kp W            &kp E         &kp R            &kp T          &kp Y      &kp U             &kp I      &kp O             &kp P
  &hml LEFT_SHIFT A   &hml LEFT_ALT S  &kp D         &hml LEFT_GUI F  &kp G          &kp H      &hmr RIGHT_WIN J  &kp K      &hmr RIGHT_ALT L  &hmr RIGHT_SHIFT SEMICOLON
  &hm LEFT_CONTROL Z  &kp X            &kp C         &kp V            &kp B          &kp N      &kp M             &kp COMMA  &kp DOT           &kp FSLH
                                       &lt 3 ESCAPE  &lt 2 TAB        &lt 1 SPACE    &kp ENTER  &kp BACKSPACE     &tog 4
            >;
        };

        nav_num {
            display-name = "NAV_NUM";
            label = "NAV_NUM";
            bindings = <
  &trans          &trans        &trans     &trans        &trans          &trans              &trans          &kp UP_ARROW      &trans           &trans
  &kp LEFT_SHIFT  &kp LEFT_ALT  &kp LCTRL  &kp LEFT_WIN  &kp CAPSLOCK    &trans              &kp LEFT_ARROW  &kp DOWN_ARROW    &kp RIGHT_ARROW  &kp PAGE_UP
  &trans          &trans        &trans     &trans        &trans          &kp LG(LEFT_ARROW)  &kp LG(DOWN)    &kp LG(UP_ARROW)  &kp RG(RIGHT)    &kp PAGE_DOWN
                                &trans     &trans        &trans          &trans              &trans          &trans
            >;
        };

        sym {
            label = "SYM";
            display-name = "SYM";
            bindings = <
  &kp EXCLAMATION   &kp AT             &kp HASH       &kp DOLLAR      &kp PERCENT        &kp CARET  &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
  &kp LEFT_GUI      &kp LEFT_ALT       &kp LCTRL      &kp LEFT_SHIFT  &kp CAPSLOCK       &kp PLUS   &kp MINUS      &kp GRAVE     &kp PIPE              &kp SINGLE_QUOTE
  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LG(LA(C))  &kp LEFT_BRACE  &kp RIGHT_BRACE    &kp EQUAL  &kp UNDER      &kp TILDE     &kp BACKSLASH         &kp DOUBLE_QUOTES
                                       &trans         &trans          &trans             &trans     &trans         &trans
            >;
        };

        fun {
            bindings = <
  &kp F1        &kp F2        &kp F3        &kp F4        &kp F5            &kp F6           &kp F7  &kp F8  &kp F9  &kp F10
  &kp F11       &kp F12       &trans        &bt BT_CLR    &bt BT_CLR_ALL    &kp C_VOLUME_UP  &trans  &trans  &trans  &trans
  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4      &kp C_VOL_DN     &trans  &trans  &trans  &trans
                              &trans        &trans        &trans            &trans           &trans  &trans
            >;

            display-name = "FUN";
            label = "FUN";
        };

        Numpad {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &kp MINUS  &kp N7        &kp N8        &kp N9        &kp ASTERISK
  &trans  &trans  &trans  &trans  &trans    &kp PLUS   &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp SLASH
  &trans  &trans  &trans  &trans  &trans    &kp N0     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PERIOD
                  &trans  &trans  &trans    &trans     &trans        &to 4
            >;

            label = "Numpad";
        };

        qwerty {
            bindings = <
  &kp Q              &kp W  &kp E   &kp R   &kp T     &kp Y   &kp U   &kp I      &kp O    &kp P
  &hml LEFT_SHIFT A  &kp S  &kp D   &kp F   &kp G     &kp H   &kp J   &kp K      &kp L    &hml RIGHT_SHIFT SEMI
  &kp Z              &kp X  &kp C   &kp V   &kp B     &kp N   &kp M   &kp COMMA  &kp DOT  &kp SLASH
                            &trans  &trans  &trans    &trans  &trans  &trans
            >;

            label = "qwerty";
        };
    };
};
